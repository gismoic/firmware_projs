
BIT_SCR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000200  00800100  00800100  00000550  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013b0  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000981  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009af  00000000  00000000  000023e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00002d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000546  00000000  00000000  00002f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000874  00000000  00000000  000034c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003d36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	23 e0       	ldi	r18, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  88:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_init>:

#include "I2C.h"

void I2C_init()
{
	TWCR |= (1 << TWEN);				               //enables TWI hardware
  90:	ec eb       	ldi	r30, 0xBC	; 188
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	84 60       	ori	r24, 0x04	; 4
  98:	80 83       	st	Z, r24
	
	DDRC |= (1 << SDA) | (1 << SCL);
  9a:	87 b1       	in	r24, 0x07	; 7
  9c:	80 63       	ori	r24, 0x30	; 48
  9e:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << SDA) | (1 << SCL);				   //enable internal pullups for bus function (works for our purposes)
  a0:	88 b1       	in	r24, 0x08	; 8
  a2:	80 63       	ori	r24, 0x30	; 48
  a4:	88 b9       	out	0x08, r24	; 8
	
	TWSR |= (1 << TWPS0);
  a6:	a9 eb       	ldi	r26, 0xB9	; 185
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	8c 91       	ld	r24, X
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	8c 93       	st	X, r24
	TWSR &= ~(1 << TWPS1);				               //prescaler bits value: 4
  b0:	8c 91       	ld	r24, X
  b2:	8d 7f       	andi	r24, 0xFD	; 253
  b4:	8c 93       	st	X, r24
	TWBR = 2;										   //calculated bit rate value, this should be correct idk tho (according to my math I should be right) OG:6
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1 << TWIE);
  bc:	80 81       	ld	r24, Z
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <I2C_Start>:
}

void I2C_Start()
{
	TWCR |= (1 << TWSTA) | (1 << TWINT);
  c4:	ec eb       	ldi	r30, 0xBC	; 188
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 6a       	ori	r24, 0xA0	; 160
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <I2C_Stop>:
}

void I2C_Stop()
{
	while(!(TWCR & (1 << TWINT)));
  d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  d4:	88 23       	and	r24, r24
  d6:	e4 f7       	brge	.-8      	; 0xd0 <I2C_Stop>
	TWCR |= (1 << TWSTO); //stop sequence sent, end of I2C communication
  d8:	ec eb       	ldi	r30, 0xBC	; 188
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	80 83       	st	Z, r24
	TWCR |= (1 << TWINT);
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	while(TWCR & (1 << TWSTO)); // wait for stop to finish
  e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ec:	84 fd       	sbrc	r24, 4
  ee:	fc cf       	rjmp	.-8      	; 0xe8 <I2C_Stop+0x18>
}
  f0:	08 95       	ret

000000f2 <I2C_Address>:

uint8_t I2C_Address(uint8_t addr, uint8_t rw)
{
	while(!(TWCR & (1 << TWINT))); //wait till TWI finishes current task
  f2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f6:	99 23       	and	r25, r25
  f8:	e4 f7       	brge	.-8      	; 0xf2 <I2C_Address>
	if((TWSR & 0xF8) == 0x08){ //start sequence was sent properly
  fa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  fe:	98 7f       	andi	r25, 0xF8	; 248
 100:	98 30       	cpi	r25, 0x08	; 8
 102:	71 f4       	brne	.+28     	; 0x120 <I2C_Address+0x2e>
		TWDR = (addr << 1) | rw; //I2C addresses are 7-bits wide with the 8th bit representing either a read or write operation 1: read 0: write
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	86 2b       	or	r24, r22
 10c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR &= ~(1 << TWSTA);
 110:	ec eb       	ldi	r30, 0xBC	; 188
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8f 7d       	andi	r24, 0xDF	; 223
 118:	80 83       	st	Z, r24
		TWCR |= (1 << TWINT);  //TWI hardware moves on to next scheduled task. TWINT is set low when a task is complete set high when it is set to move on to another task.
 11a:	80 81       	ld	r24, Z
 11c:	80 68       	ori	r24, 0x80	; 128
 11e:	80 83       	st	Z, r24
	}
	
	if((TWSR & 0xF8) == 0x20){
 120:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 124:	88 7f       	andi	r24, 0xF8	; 248
 126:	80 32       	cpi	r24, 0x20	; 32
 128:	11 f4       	brne	.+4      	; 0x12e <I2C_Address+0x3c>
		return I2C_ADDR_NACK;
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	08 95       	ret
	}
	return I2C_OK;
 12e:	81 e0       	ldi	r24, 0x01	; 1
}
 130:	08 95       	ret

00000132 <I2C_Write>:

uint8_t I2C_Write(uint8_t data)
{
	while(!(TWCR & (1 << TWINT)));
 132:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 136:	99 23       	and	r25, r25
 138:	e4 f7       	brge	.-8      	; 0x132 <I2C_Write>
	if(((TWSR & 0xF8) == 0x18) || ((TWSR & 0xF8) == 0x28)){ //SLA + W/Data sequence was sent properly with ACK
 13a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 13e:	98 7f       	andi	r25, 0xF8	; 248
 140:	98 31       	cpi	r25, 0x18	; 24
 142:	29 f0       	breq	.+10     	; 0x14e <I2C_Write+0x1c>
 144:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 148:	98 7f       	andi	r25, 0xF8	; 248
 14a:	98 32       	cpi	r25, 0x28	; 40
 14c:	61 f4       	brne	.+24     	; 0x166 <I2C_Write+0x34>
		TWDR = data;
 14e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR &= ~(1 << TWSTA);
 152:	ec eb       	ldi	r30, 0xBC	; 188
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	8f 7d       	andi	r24, 0xDF	; 223
 15a:	80 83       	st	Z, r24
		TWCR |= (1 << TWINT);
 15c:	80 81       	ld	r24, Z
 15e:	80 68       	ori	r24, 0x80	; 128
 160:	80 83       	st	Z, r24
	
	}else if((TWSR & 0xF8) == 0x30)
	{
		return I2C_DATA_NACK;
	}
	return I2C_OK;
 162:	81 e0       	ldi	r24, 0x01	; 1
{
	while(!(TWCR & (1 << TWINT)));
	if(((TWSR & 0xF8) == 0x18) || ((TWSR & 0xF8) == 0x28)){ //SLA + W/Data sequence was sent properly with ACK
		TWDR = data;
		TWCR &= ~(1 << TWSTA);
		TWCR |= (1 << TWINT);
 164:	08 95       	ret
	
	}else if((TWSR & 0xF8) == 0x30)
 166:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 16a:	88 7f       	andi	r24, 0xF8	; 248
 16c:	80 33       	cpi	r24, 0x30	; 48
 16e:	11 f4       	brne	.+4      	; 0x174 <I2C_Write+0x42>
	{
		return I2C_DATA_NACK;
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	08 95       	ret
	}
	return I2C_OK;
 174:	81 e0       	ldi	r24, 0x01	; 1
}
 176:	08 95       	ret

00000178 <main>:
#include "main.h"

int main(void)
{
    
	_74HC165_init();
 178:	0e 94 65 02 	call	0x4ca	; 0x4ca <_74HC165_init>
	I2C_init();
 17c:	0e 94 48 00 	call	0x90	; 0x90 <I2C_init>
	
	SSD1306_software_begin();
 180:	0e 94 29 01 	call	0x252	; 0x252 <SSD1306_software_begin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	80 e7       	ldi	r24, 0x70	; 112
 188:	92 e0       	ldi	r25, 0x02	; 2
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0x12>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x1c>
 194:	00 00       	nop
	_delay_ms(50);
	DDRC |= (1 << 0) | (1 << 1);
 196:	87 b1       	in	r24, 0x07	; 7
 198:	83 60       	ori	r24, 0x03	; 3
 19a:	87 b9       	out	0x07, r24	; 7
	
    while (1) 
    {
		SSD1306_DrawRect(0, 0, 127, 31, 0);
 19c:	00 e0       	ldi	r16, 0x00	; 0
 19e:	2f e1       	ldi	r18, 0x1F	; 31
 1a0:	4f e7       	ldi	r20, 0x7F	; 127
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 b0 01 	call	0x360	; 0x360 <SSD1306_DrawRect>
		
		for(uint8_t i = 1; i < 6; i++)
 1aa:	c1 e0       	ldi	r28, 0x01	; 1
 1ac:	35 c0       	rjmp	.+106    	; 0x218 <main+0xa0>
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	87 ee       	ldi	r24, 0xE7	; 231
 1b2:	93 e0       	ldi	r25, 0x03	; 3
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x3c>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x46>
 1be:	00 00       	nop
		{
			_delay_ms(80);
			SSD1306_DrawRect(0 + (3*i), 0 + (3*i), 127 - (6*i), 31 - (5*i), 0);
 1c0:	dc 2f       	mov	r29, r28
 1c2:	dd 0f       	add	r29, r29
 1c4:	dd 0f       	add	r29, r29
 1c6:	dc 0f       	add	r29, r28
 1c8:	d1 95       	neg	r29
 1ca:	d1 5e       	subi	r29, 0xE1	; 225
 1cc:	fc 2e       	mov	r15, r28
 1ce:	ff 0c       	add	r15, r15
 1d0:	8f 2d       	mov	r24, r15
 1d2:	8c 0f       	add	r24, r28
 1d4:	48 2f       	mov	r20, r24
 1d6:	44 0f       	add	r20, r20
 1d8:	41 95       	neg	r20
 1da:	1f e7       	ldi	r17, 0x7F	; 127
 1dc:	14 0f       	add	r17, r20
 1de:	fc 0e       	add	r15, r28
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	2d 2f       	mov	r18, r29
 1e4:	41 2f       	mov	r20, r17
 1e6:	6f 2d       	mov	r22, r15
 1e8:	8f 2d       	mov	r24, r15
 1ea:	0e 94 b0 01 	call	0x360	; 0x360 <SSD1306_DrawRect>
			
			if(i == 5)
 1ee:	c5 30       	cpi	r28, 0x05	; 5
 1f0:	39 f4       	brne	.+14     	; 0x200 <main+0x88>
			{
				SSD1306_DrawRect(0 + (3*i), 0 + (3*i), 127 - (6*i), 31 - (5*i), 1);
 1f2:	01 e0       	ldi	r16, 0x01	; 1
 1f4:	2d 2f       	mov	r18, r29
 1f6:	41 2f       	mov	r20, r17
 1f8:	6f 2d       	mov	r22, r15
 1fa:	8f 2d       	mov	r24, r15
 1fc:	0e 94 b0 01 	call	0x360	; 0x360 <SSD1306_DrawRect>
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	81 ee       	ldi	r24, 0xE1	; 225
 204:	94 e0       	ldi	r25, 0x04	; 4
 206:	21 50       	subi	r18, 0x01	; 1
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x8e>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x98>
 210:	00 00       	nop
			}
			
			_delay_ms(100);
			
			SSD1306_display_GDDRAM();
 212:	0e 94 10 02 	call	0x420	; 0x420 <SSD1306_display_GDDRAM>
	
    while (1) 
    {
		SSD1306_DrawRect(0, 0, 127, 31, 0);
		
		for(uint8_t i = 1; i < 6; i++)
 216:	cf 5f       	subi	r28, 0xFF	; 255
 218:	c6 30       	cpi	r28, 0x06	; 6
 21a:	48 f2       	brcs	.-110    	; 0x1ae <main+0x36>
 21c:	2f ef       	ldi	r18, 0xFF	; 255
 21e:	81 ee       	ldi	r24, 0xE1	; 225
 220:	94 e0       	ldi	r25, 0x04	; 4
 222:	21 50       	subi	r18, 0x01	; 1
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <main+0xaa>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0xb4>
 22c:	00 00       	nop
			
			SSD1306_display_GDDRAM();
		}
		
		_delay_ms(100);
		SSD1306_clearDisplay();
 22e:	0e 94 03 02 	call	0x406	; 0x406 <SSD1306_clearDisplay>
		SSD1306_display_GDDRAM();
 232:	0e 94 10 02 	call	0x420	; 0x420 <SSD1306_display_GDDRAM>
		
    }
 236:	b2 cf       	rjmp	.-156    	; 0x19c <main+0x24>

00000238 <SEND_COMMAND>:
		{
			SSD1306_DrawPixel(x + i, y + _y, 1);
		}
	}
	
}
 238:	cf 93       	push	r28
 23a:	c6 2f       	mov	r28, r22
 23c:	82 95       	swap	r24
 23e:	88 0f       	add	r24, r24
 240:	88 0f       	add	r24, r24
 242:	80 7c       	andi	r24, 0xC0	; 192
 244:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Write>
 248:	8c 2f       	mov	r24, r28
 24a:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Write>
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <SSD1306_software_begin>:
 252:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Start>
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	8c e3       	ldi	r24, 0x3C	; 60
 25a:	0e 94 79 00 	call	0xf2	; 0xf2 <I2C_Address>
 25e:	6e ea       	ldi	r22, 0xAE	; 174
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 1c 01 	call	0x238	; 0x238 <SEND_COMMAND>
 266:	68 ea       	ldi	r22, 0xA8	; 168
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	0e 94 1c 01 	call	0x238	; 0x238 <SEND_COMMAND>
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Write>
 274:	63 ed       	ldi	r22, 0xD3	; 211
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 1c 01 	call	0x238	; 0x238 <SEND_COMMAND>
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Write>
 282:	60 e4       	ldi	r22, 0x40	; 64
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 1c 01 	call	0x238	; 0x238 <SEND_COMMAND>
 28a:	60 ea       	ldi	r22, 0xA0	; 160
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 1c 01 	call	0x238	; 0x238 <SEND_COMMAND>
 292:	60 ec       	ldi	r22, 0xC0	; 192
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	0e 94 1c 01 	call	0x238	; 0x238 <SEND_COMMAND>
 29a:	6a ed       	ldi	r22, 0xDA	; 218
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 1c 01 	call	0x238	; 0x238 <SEND_COMMAND>
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Write>
 2a8:	61 e8       	ldi	r22, 0x81	; 129
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 1c 01 	call	0x238	; 0x238 <SEND_COMMAND>
 2b0:	8f e7       	ldi	r24, 0x7F	; 127
 2b2:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Write>
 2b6:	64 ea       	ldi	r22, 0xA4	; 164
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 1c 01 	call	0x238	; 0x238 <SEND_COMMAND>
 2be:	66 ea       	ldi	r22, 0xA6	; 166
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 1c 01 	call	0x238	; 0x238 <SEND_COMMAND>
 2c6:	65 ed       	ldi	r22, 0xD5	; 213
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 1c 01 	call	0x238	; 0x238 <SEND_COMMAND>
 2ce:	80 e8       	ldi	r24, 0x80	; 128
 2d0:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Write>
 2d4:	6d e8       	ldi	r22, 0x8D	; 141
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	0e 94 1c 01 	call	0x238	; 0x238 <SEND_COMMAND>
 2dc:	84 e1       	ldi	r24, 0x14	; 20
 2de:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Write>
 2e2:	6f ea       	ldi	r22, 0xAF	; 175
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	0e 94 1c 01 	call	0x238	; 0x238 <SEND_COMMAND>
 2ea:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Stop>
 2ee:	08 95       	ret

000002f0 <SSD1306_DrawPixel>:
 2f0:	44 23       	and	r20, r20
 2f2:	19 f0       	breq	.+6      	; 0x2fa <SSD1306_DrawPixel+0xa>
 2f4:	41 30       	cpi	r20, 0x01	; 1
 2f6:	d9 f0       	breq	.+54     	; 0x32e <SSD1306_DrawPixel+0x3e>
 2f8:	08 95       	ret
 2fa:	96 2f       	mov	r25, r22
 2fc:	96 95       	lsr	r25
 2fe:	96 95       	lsr	r25
 300:	96 95       	lsr	r25
 302:	e8 2f       	mov	r30, r24
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 e8       	ldi	r24, 0x80	; 128
 308:	98 9f       	mul	r25, r24
 30a:	e0 0d       	add	r30, r0
 30c:	f1 1d       	adc	r31, r1
 30e:	11 24       	eor	r1, r1
 310:	67 70       	andi	r22, 0x07	; 7
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <SSD1306_DrawPixel+0x2c>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <SSD1306_DrawPixel+0x28>
 320:	e0 50       	subi	r30, 0x00	; 0
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	80 95       	com	r24
 326:	90 81       	ld	r25, Z
 328:	89 23       	and	r24, r25
 32a:	80 83       	st	Z, r24
 32c:	08 95       	ret
 32e:	96 2f       	mov	r25, r22
 330:	96 95       	lsr	r25
 332:	96 95       	lsr	r25
 334:	96 95       	lsr	r25
 336:	e8 2f       	mov	r30, r24
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 e8       	ldi	r24, 0x80	; 128
 33c:	98 9f       	mul	r25, r24
 33e:	e0 0d       	add	r30, r0
 340:	f1 1d       	adc	r31, r1
 342:	11 24       	eor	r1, r1
 344:	67 70       	andi	r22, 0x07	; 7
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <SSD1306_DrawPixel+0x60>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <SSD1306_DrawPixel+0x5c>
 354:	e0 50       	subi	r30, 0x00	; 0
 356:	ff 4f       	sbci	r31, 0xFF	; 255
 358:	90 81       	ld	r25, Z
 35a:	89 2b       	or	r24, r25
 35c:	80 83       	st	Z, r24
 35e:	08 95       	ret

00000360 <SSD1306_DrawRect>:
 360:	df 92       	push	r13
 362:	ef 92       	push	r14
 364:	ff 92       	push	r15
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	18 2f       	mov	r17, r24
 370:	f6 2e       	mov	r15, r22
 372:	d4 2f       	mov	r29, r20
 374:	d2 2e       	mov	r13, r18
 376:	c0 e0       	ldi	r28, 0x00	; 0
 378:	07 c0       	rjmp	.+14     	; 0x388 <SSD1306_DrawRect+0x28>
 37a:	41 e0       	ldi	r20, 0x01	; 1
 37c:	6f 2d       	mov	r22, r15
 37e:	8c 2f       	mov	r24, r28
 380:	81 0f       	add	r24, r17
 382:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SSD1306_DrawPixel>
 386:	cf 5f       	subi	r28, 0xFF	; 255
 388:	cd 17       	cp	r28, r29
 38a:	b8 f3       	brcs	.-18     	; 0x37a <SSD1306_DrawRect+0x1a>
 38c:	c0 e0       	ldi	r28, 0x00	; 0
 38e:	08 c0       	rjmp	.+16     	; 0x3a0 <SSD1306_DrawRect+0x40>
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	6f 2d       	mov	r22, r15
 394:	6d 0d       	add	r22, r13
 396:	8c 2f       	mov	r24, r28
 398:	81 0f       	add	r24, r17
 39a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SSD1306_DrawPixel>
 39e:	cf 5f       	subi	r28, 0xFF	; 255
 3a0:	cd 17       	cp	r28, r29
 3a2:	b0 f3       	brcs	.-20     	; 0x390 <SSD1306_DrawRect+0x30>
 3a4:	c0 e0       	ldi	r28, 0x00	; 0
 3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <SSD1306_DrawRect+0x58>
 3a8:	6c 2f       	mov	r22, r28
 3aa:	6f 0d       	add	r22, r15
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	8d 2f       	mov	r24, r29
 3b0:	81 0f       	add	r24, r17
 3b2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SSD1306_DrawPixel>
 3b6:	cf 5f       	subi	r28, 0xFF	; 255
 3b8:	cd 15       	cp	r28, r13
 3ba:	b0 f3       	brcs	.-20     	; 0x3a8 <SSD1306_DrawRect+0x48>
 3bc:	c0 e0       	ldi	r28, 0x00	; 0
 3be:	07 c0       	rjmp	.+14     	; 0x3ce <SSD1306_DrawRect+0x6e>
 3c0:	6c 2f       	mov	r22, r28
 3c2:	6f 0d       	add	r22, r15
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	81 2f       	mov	r24, r17
 3c8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SSD1306_DrawPixel>
 3cc:	cf 5f       	subi	r28, 0xFF	; 255
 3ce:	cd 15       	cp	r28, r13
 3d0:	b8 f3       	brcs	.-18     	; 0x3c0 <SSD1306_DrawRect+0x60>
 3d2:	ee 24       	eor	r14, r14
 3d4:	e3 94       	inc	r14
 3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <SSD1306_DrawRect+0x92>
 3d8:	40 2f       	mov	r20, r16
 3da:	6e 2d       	mov	r22, r14
 3dc:	6f 0d       	add	r22, r15
 3de:	8c 2f       	mov	r24, r28
 3e0:	81 0f       	add	r24, r17
 3e2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SSD1306_DrawPixel>
 3e6:	cf 5f       	subi	r28, 0xFF	; 255
 3e8:	01 c0       	rjmp	.+2      	; 0x3ec <SSD1306_DrawRect+0x8c>
 3ea:	c1 e0       	ldi	r28, 0x01	; 1
 3ec:	cd 17       	cp	r28, r29
 3ee:	a0 f3       	brcs	.-24     	; 0x3d8 <SSD1306_DrawRect+0x78>
 3f0:	e3 94       	inc	r14
 3f2:	ed 14       	cp	r14, r13
 3f4:	d0 f3       	brcs	.-12     	; 0x3ea <SSD1306_DrawRect+0x8a>
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	08 95       	ret

00000406 <SSD1306_clearDisplay>:


void SSD1306_clearDisplay()
{
	for(uint16_t i = 0; i < 512; i++)
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	05 c0       	rjmp	.+10     	; 0x416 <SSD1306_clearDisplay+0x10>
	{
		GDDRAM_BUFFER[i] = 0x00;
 40c:	fc 01       	movw	r30, r24
 40e:	e0 50       	subi	r30, 0x00	; 0
 410:	ff 4f       	sbci	r31, 0xFF	; 255
 412:	10 82       	st	Z, r1
}


void SSD1306_clearDisplay()
{
	for(uint16_t i = 0; i < 512; i++)
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	81 15       	cp	r24, r1
 418:	22 e0       	ldi	r18, 0x02	; 2
 41a:	92 07       	cpc	r25, r18
 41c:	b8 f3       	brcs	.-18     	; 0x40c <SSD1306_clearDisplay+0x6>
	{
		GDDRAM_BUFFER[i] = 0x00;
	}
}
 41e:	08 95       	ret

00000420 <SSD1306_display_GDDRAM>:

void SSD1306_display_GDDRAM()
{
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
	I2C_Start();
 424:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Start>
	I2C_Address(I2C_ADDRESS, 0);
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	8c e3       	ldi	r24, 0x3C	; 60
 42c:	0e 94 79 00 	call	0xf2	; 0xf2 <I2C_Address>
	
	SEND_COMMAND(0b00, 0x20);	   //addressing mode change command
 430:	60 e2       	ldi	r22, 0x20	; 32
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 1c 01 	call	0x238	; 0x238 <SEND_COMMAND>
	I2C_Write(0x00);			   //horizontal addressing mode select
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Write>
	
	SEND_COMMAND(0b00, 0x21);      //setting column address
 43e:	61 e2       	ldi	r22, 0x21	; 33
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	0e 94 1c 01 	call	0x238	; 0x238 <SEND_COMMAND>
	I2C_Write(0);			       //starting column address
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Write>
	I2C_Write(0xFF);		       //ending column address
 44c:	8f ef       	ldi	r24, 0xFF	; 255
 44e:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Write>
	
	SEND_COMMAND(0b00, 0x22);      //setting page address
 452:	62 e2       	ldi	r22, 0x22	; 34
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	0e 94 1c 01 	call	0x238	; 0x238 <SEND_COMMAND>
	I2C_Write(0x00);			   //starting page address
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Write>
	I2C_Write(0xFF);			   //ending page address
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Write>
	
	I2C_Stop();
 466:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Stop>
	
	I2C_Start();
 46a:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Start>
	I2C_Address(I2C_ADDRESS, 0);
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	8c e3       	ldi	r24, 0x3C	; 60
 472:	0e 94 79 00 	call	0xf2	; 0xf2 <I2C_Address>
	SEND_COMMAND(0x00, 0x40);
 476:	60 e4       	ldi	r22, 0x40	; 64
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 1c 01 	call	0x238	; 0x238 <SEND_COMMAND>
	I2C_Stop();
 47e:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Stop>
	
	for(uint8_t y = 0; y < SCREEN_HEIGHT; y++){
 482:	d0 e0       	ldi	r29, 0x00	; 0
 484:	1d c0       	rjmp	.+58     	; 0x4c0 <SSD1306_display_GDDRAM+0xa0>
		I2C_Start();
 486:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Start>
		I2C_Address(I2C_ADDRESS, 0);
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	8c e3       	ldi	r24, 0x3C	; 60
 48e:	0e 94 79 00 	call	0xf2	; 0xf2 <I2C_Address>
		I2C_Write(0x40);
 492:	80 e4       	ldi	r24, 0x40	; 64
 494:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Write>
		for(uint8_t x = 0; x < SCREEN_WIDTH/8; x++){
 498:	c0 e0       	ldi	r28, 0x00	; 0
 49a:	0d c0       	rjmp	.+26     	; 0x4b6 <SSD1306_display_GDDRAM+0x96>
			I2C_Write(GDDRAM_BUFFER[x + (16*y)]);
 49c:	ec 2f       	mov	r30, r28
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 e1       	ldi	r24, 0x10	; 16
 4a2:	d8 9f       	mul	r29, r24
 4a4:	e0 0d       	add	r30, r0
 4a6:	f1 1d       	adc	r31, r1
 4a8:	11 24       	eor	r1, r1
 4aa:	e0 50       	subi	r30, 0x00	; 0
 4ac:	ff 4f       	sbci	r31, 0xFF	; 255
 4ae:	80 81       	ld	r24, Z
 4b0:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Write>
	
	for(uint8_t y = 0; y < SCREEN_HEIGHT; y++){
		I2C_Start();
		I2C_Address(I2C_ADDRESS, 0);
		I2C_Write(0x40);
		for(uint8_t x = 0; x < SCREEN_WIDTH/8; x++){
 4b4:	cf 5f       	subi	r28, 0xFF	; 255
 4b6:	c0 31       	cpi	r28, 0x10	; 16
 4b8:	88 f3       	brcs	.-30     	; 0x49c <SSD1306_display_GDDRAM+0x7c>
			I2C_Write(GDDRAM_BUFFER[x + (16*y)]);
		}
		
		I2C_Stop();
 4ba:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Stop>
	I2C_Start();
	I2C_Address(I2C_ADDRESS, 0);
	SEND_COMMAND(0x00, 0x40);
	I2C_Stop();
	
	for(uint8_t y = 0; y < SCREEN_HEIGHT; y++){
 4be:	df 5f       	subi	r29, 0xFF	; 255
 4c0:	d0 32       	cpi	r29, 0x20	; 32
 4c2:	08 f3       	brcs	.-62     	; 0x486 <SSD1306_display_GDDRAM+0x66>
			I2C_Write(GDDRAM_BUFFER[x + (16*y)]);
		}
		
		I2C_Stop();
	}
}
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	08 95       	ret

000004ca <_74HC165_init>:
 */ 
#include "_74HC164.h"

void _74HC165_init()
{
	DDRD |= (1 << SHLD) | (1 << CLK);
 4ca:	8a b1       	in	r24, 0x0a	; 10
 4cc:	80 66       	ori	r24, 0x60	; 96
 4ce:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DAT);
 4d0:	8a b1       	in	r24, 0x0a	; 10
 4d2:	8f 77       	andi	r24, 0x7F	; 127
 4d4:	8a b9       	out	0x0a, r24	; 10
 4d6:	08 95       	ret

000004d8 <_exit>:
 4d8:	f8 94       	cli

000004da <__stop_program>:
 4da:	ff cf       	rjmp	.-2      	; 0x4da <__stop_program>
