
SPI_FAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000058a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000005b9  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000005c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001caa  00000000  00000000  000006c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a35  00000000  00000000  00002371  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000925  00000000  00000000  00002da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  000036cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000250  00000000  00000000  0000392c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000794  00000000  00000000  00003b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00004310  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000508  00000508  0000057c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000043d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.USART_init 00000020  00000496  00000496  0000050a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    000000ca  000000bc  000000bc  00000130  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.MSD_Transmition 00000046  00000262  00000262  000002d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.readRes_1 0000001e  000004b6  000004b6  0000052a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.readRes_7 00000036  00000432  00000432  000004a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.readRes_3 0000003e  000003f4  000003f4  00000468  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.SPI_warmup 0000002e  00000468  00000468  000004dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.SPI_IDLE 00000040  00000374  00000374  000003e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.SPI_READ_OCR 00000044  000002ee  000002ee  00000362  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.SPI_IF_CON 00000046  000002a8  000002a8  0000031c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.SPI_APP_CMD 00000040  000003b4  000003b4  00000428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.SPI_SEND_OP 00000042  00000332  00000332  000003a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.MSD_SPI_Init 00000094  00000186  00000186  000001fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.MSD_SPI_READ_SINGLE_BLOCK 00000048  0000021a  0000021a  0000028e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.SPI_Init 00000012  000004ea  000004ea  0000055e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.SPI_Transmit 0000000c  000004fc  000004fc  00000570  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_fini 00000002  00000510  00000510  00000584  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_funcs_on_exit 00000002  00000512  00000512  00000586  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_simulator_exit 00000002  00000514  00000514  00000588  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.exit    00000016  000004d4  000004d4  00000548  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text._Exit   00000004  0000050c  0000050c  00000580  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
   8:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
   c:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  10:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  14:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  18:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  1c:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  20:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  24:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  28:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  2c:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  30:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  34:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  38:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  3c:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  40:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  44:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  48:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  4c:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  50:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  54:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  58:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  5c:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  60:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>
  64:	0c 94 84 02 	jmp	0x508	; 0x508 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	e8 e6       	ldi	r30, 0x68	; 104
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	17 c0       	rjmp	.+46     	; 0xaa <__do_clear_bss+0x8>
  7c:	b5 91       	lpm	r27, Z+
  7e:	a5 91       	lpm	r26, Z+
  80:	35 91       	lpm	r19, Z+
  82:	25 91       	lpm	r18, Z+
  84:	05 91       	lpm	r16, Z+
  86:	07 fd       	sbrc	r16, 7
  88:	0c c0       	rjmp	.+24     	; 0xa2 <__do_clear_bss>
  8a:	95 91       	lpm	r25, Z+
  8c:	85 91       	lpm	r24, Z+
  8e:	ef 01       	movw	r28, r30
  90:	f9 2f       	mov	r31, r25
  92:	e8 2f       	mov	r30, r24
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0x20>
  9e:	fe 01       	movw	r30, r28
  a0:	04 c0       	rjmp	.+8      	; 0xaa <__do_clear_bss+0x8>

000000a2 <__do_clear_bss>:
  a2:	1d 92       	st	X+, r1
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	e1 f7       	brne	.-8      	; 0xa2 <__do_clear_bss>
  aa:	e8 36       	cpi	r30, 0x68	; 104
  ac:	f4 07       	cpc	r31, r20
  ae:	31 f7       	brne	.-52     	; 0x7c <__do_copy_data+0x8>
  b0:	0e 94 5e 00 	call	0xbc	; 0xbc <_etext>
  b4:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <exit>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>

Disassembly of section .text:

00000508 <__bad_interrupt>:
 508:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.USART_init:

00000496 <USART_init>:
 */ 
#include "USART.h"

void USART_init()
{
	 UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 496:	e2 ec       	ldi	r30, 0xC2	; 194
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	80 81       	ld	r24, Z
 49c:	86 60       	ori	r24, 0x06	; 6
 49e:	80 83       	st	Z, r24
	 UCSR0B |= (1 <<  TXEN0);
 4a0:	e1 ec       	ldi	r30, 0xC1	; 193
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 81       	ld	r24, Z
 4a6:	88 60       	ori	r24, 0x08	; 8
 4a8:	80 83       	st	Z, r24
	 UBRR0L = BAUD;
 4aa:	87 e6       	ldi	r24, 0x67	; 103
 4ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 UBRR0H = BAUD >> 8;
 4b0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 4b4:	08 95       	ret

Disassembly of section .text.main:

000000bc <main>:
#include "_74165.h"
#include "USART.h"
#include "SD.h"

int main(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	c2 50       	subi	r28, 0x02	; 2
  c6:	d2 40       	sbci	r29, 0x02	; 2
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
	uint8_t og = 1;
	DDRC |= (1 << 0) | (1 << 1);
  d2:	87 b1       	in	r24, 0x07	; 7
  d4:	83 60       	ori	r24, 0x03	; 3
  d6:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << 4);
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	80 61       	ori	r24, 0x10	; 16
  dc:	8a b9       	out	0x0a, r24	; 10
	
	if(og == 1)
	{
		SPI_Init();
  de:	0e 94 75 02 	call	0x4ea	; 0x4ea <SPI_Init>
		SPCR |= (1 << SPR1);
  e2:	8c b5       	in	r24, 0x2c	; 44
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	8c bd       	out	0x2c, r24	; 44
		USART_init();
  e8:	0e 94 4b 02 	call	0x496	; 0x496 <USART_init>
		
		uint8_t buffer[514];
		
		uint8_t init = MSD_SPI_Init();
  ec:	0e 94 c3 00 	call	0x186	; 0x186 <MSD_SPI_Init>
  f0:	18 2f       	mov	r17, r24
		
		if(init == INIT_SUCCESS)
  f2:	81 11       	cpse	r24, r1
  f4:	04 c0       	rjmp	.+8      	; 0xfe <main+0x42>
		{
			PORTC |= (1 << 0);
  f6:	88 b1       	in	r24, 0x08	; 8
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	88 b9       	out	0x08, r24	; 8
  fc:	07 c0       	rjmp	.+14     	; 0x10c <main+0x50>
		}
		else
		{
			uint8_t init1 = MSD_SPI_Init();
  fe:	0e 94 c3 00 	call	0x186	; 0x186 <MSD_SPI_Init>
			if(init1 != INIT_SUCCESS) PORTC |= (1 << 1);
 102:	88 23       	and	r24, r24
 104:	19 f0       	breq	.+6      	; 0x10c <main+0x50>
 106:	88 b1       	in	r24, 0x08	; 8
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	88 b9       	out	0x08, r24	; 8
		}
		
		if(init == INIT_SUCCESS)
 10c:	11 11       	cpse	r17, r1
 10e:	37 c0       	rjmp	.+110    	; 0x17e <main+0xc2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	85 ea       	ldi	r24, 0xA5	; 165
 114:	9e e0       	ldi	r25, 0x0E	; 14
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x5a>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x64>
 120:	00 00       	nop
		{
			_delay_ms(300);
			
			PORTC &= ~(1 << 0);
 122:	88 b1       	in	r24, 0x08	; 8
 124:	8e 7f       	andi	r24, 0xFE	; 254
 126:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1 << 1);
 128:	88 b1       	in	r24, 0x08	; 8
 12a:	8d 7f       	andi	r24, 0xFD	; 253
 12c:	88 b9       	out	0x08, r24	; 8
			
			uint8_t data_res = MSD_SPI_READ_SINGLE_BLOCK(0x00000000, buffer);
 12e:	ae 01       	movw	r20, r28
 130:	4f 5f       	subi	r20, 0xFF	; 255
 132:	5f 4f       	sbci	r21, 0xFF	; 255
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	cb 01       	movw	r24, r22
 13a:	0e 94 0d 01 	call	0x21a	; 0x21a <MSD_SPI_READ_SINGLE_BLOCK>
			
			
			if(data_res == READ_BLOCK_SUCCESS)
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	21 f4       	brne	.+8      	; 0x14a <main+0x8e>
			{
				PORTC |= (1 << 0);
 142:	98 b1       	in	r25, 0x08	; 8
 144:	91 60       	ori	r25, 0x01	; 1
 146:	98 b9       	out	0x08, r25	; 8
 148:	0b c0       	rjmp	.+22     	; 0x160 <main+0xa4>
			}
			else
			{
				PORTC |= (1 << 1);
 14a:	88 b1       	in	r24, 0x08	; 8
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	88 b9       	out	0x08, r24	; 8
				data_res = MSD_SPI_READ_SINGLE_BLOCK(0x00000000, buffer);
 150:	ae 01       	movw	r20, r28
 152:	4f 5f       	subi	r20, 0xFF	; 255
 154:	5f 4f       	sbci	r21, 0xFF	; 255
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	cb 01       	movw	r24, r22
 15c:	0e 94 0d 01 	call	0x21a	; 0x21a <MSD_SPI_READ_SINGLE_BLOCK>
			}
			
			PORTC &= ~(1 << 0);
 160:	98 b1       	in	r25, 0x08	; 8
 162:	9e 7f       	andi	r25, 0xFE	; 254
 164:	98 b9       	out	0x08, r25	; 8
			PORTC &= ~(1 << 1);
 166:	98 b1       	in	r25, 0x08	; 8
 168:	9d 7f       	andi	r25, 0xFD	; 253
 16a:	98 b9       	out	0x08, r25	; 8
			
			if(data_res == READ_BLOCK_SUCCESS)
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	21 f4       	brne	.+8      	; 0x178 <main+0xbc>
			{
				PORTC |= (1 << 0);
 170:	88 b1       	in	r24, 0x08	; 8
 172:	81 60       	ori	r24, 0x01	; 1
 174:	88 b9       	out	0x08, r24	; 8
 176:	03 c0       	rjmp	.+6      	; 0x17e <main+0xc2>
			}
			else
			{
				PORTC |= (1 << 1);
 178:	88 b1       	in	r24, 0x08	; 8
 17a:	82 60       	ori	r24, 0x02	; 2
 17c:	88 b9       	out	0x08, r24	; 8
	}
	
	
    while(1)
    {
		PORTD |= (1 << 4);
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 61       	ori	r24, 0x10	; 16
 182:	8b b9       	out	0x0b, r24	; 11
 184:	fc cf       	rjmp	.-8      	; 0x17e <main+0xc2>

Disassembly of section .text.MSD_Transmition:

00000262 <MSD_Transmition>:
 */ 
#include "MiSD.h"


void MSD_Transmition(uint8_t CMD, uint32_t ARG, uint8_t CRC)
{
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	d4 2f       	mov	r29, r20
 26e:	15 2f       	mov	r17, r21
 270:	06 2f       	mov	r16, r22
 272:	f7 2e       	mov	r15, r23
 274:	c2 2f       	mov	r28, r18
	SPI_Transmit(CMD | 0x40);
 276:	80 64       	ori	r24, 0x40	; 64
 278:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	
	SPI_Transmit((uint8_t)(ARG >> 24));
 27c:	8f 2d       	mov	r24, r15
 27e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	SPI_Transmit((uint8_t)(ARG >> 16));
 282:	80 2f       	mov	r24, r16
 284:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	SPI_Transmit((uint8_t)(ARG >> 8));
 288:	81 2f       	mov	r24, r17
 28a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	SPI_Transmit((uint8_t)(ARG));
 28e:	8d 2f       	mov	r24, r29
 290:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	
	SPI_Transmit(CRC | 0x01);
 294:	8c 2f       	mov	r24, r28
 296:	81 60       	ori	r24, 0x01	; 1
 298:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	ff 90       	pop	r15
 2a6:	08 95       	ret

Disassembly of section .text.readRes_1:

000004b6 <readRes_1>:

uint8_t readRes_1()
{
 4b6:	cf 93       	push	r28
	uint8_t i = 0, res1;
 4b8:	c0 e0       	ldi	r28, 0x00	; 0
	
	while((res1 = SPI_Transmit(0xFF)) == 0xFF)
 4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <readRes_1+0xc>
	{
		i++;
 4bc:	cf 5f       	subi	r28, 0xFF	; 255
		
		if(i > 8) return 0xFF; //this means there's an error check hardware connections
 4be:	c9 30       	cpi	r28, 0x09	; 9
 4c0:	30 f4       	brcc	.+12     	; 0x4ce <readRes_1+0x18>

uint8_t readRes_1()
{
	uint8_t i = 0, res1;
	
	while((res1 = SPI_Transmit(0xFF)) == 0xFF)
 4c2:	8f ef       	ldi	r24, 0xFF	; 255
 4c4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
 4c8:	8f 3f       	cpi	r24, 0xFF	; 255
 4ca:	c1 f3       	breq	.-16     	; 0x4bc <readRes_1+0x6>
 4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <readRes_1+0x1a>
	{
		i++;
		
		if(i > 8) return 0xFF; //this means there's an error check hardware connections
 4ce:	8f ef       	ldi	r24, 0xFF	; 255
	}
	
	return res1; //something that isn't 0xFF
}
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

Disassembly of section .text.readRes_7:

00000432 <readRes_7>:

void readRes_7(uint8_t res[])
{
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	ec 01       	movw	r28, r24
	res[0] = readRes_1();
 438:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <readRes_1>
 43c:	88 83       	st	Y, r24
	
	if(res[0] > 1) return;
 43e:	82 30       	cpi	r24, 0x02	; 2
 440:	80 f4       	brcc	.+32     	; 0x462 <readRes_7+0x30>
	
	res[1] = SPI_Transmit(0xFF);
 442:	8f ef       	ldi	r24, 0xFF	; 255
 444:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
 448:	89 83       	std	Y+1, r24	; 0x01
	res[2] = SPI_Transmit(0xFF);
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
 450:	8a 83       	std	Y+2, r24	; 0x02
	res[3] = SPI_Transmit(0xFF);
 452:	8f ef       	ldi	r24, 0xFF	; 255
 454:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
 458:	8b 83       	std	Y+3, r24	; 0x03
	res[4] = SPI_Transmit(0xFF);
 45a:	8f ef       	ldi	r24, 0xFF	; 255
 45c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
 460:	8c 83       	std	Y+4, r24	; 0x04
	
}
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

Disassembly of section .text.readRes_3:

000003f4 <readRes_3>:

void readRes_3(uint8_t *res[])
{
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	ec 01       	movw	r28, r24
	res[0] = readRes_1();
 3fa:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <readRes_1>
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	99 83       	std	Y+1, r25	; 0x01
 402:	88 83       	st	Y, r24
	if(res[0] > 1) return;
 404:	02 97       	sbiw	r24, 0x02	; 2
 406:	90 f4       	brcc	.+36     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	
	res[1] = SPI_Transmit(0xFF);
 408:	8f ef       	ldi	r24, 0xFF	; 255
 40a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	9b 83       	std	Y+3, r25	; 0x03
 412:	8a 83       	std	Y+2, r24	; 0x02
	res[2] = SPI_Transmit(0xFF);
 414:	8f ef       	ldi	r24, 0xFF	; 255
 416:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	9d 83       	std	Y+5, r25	; 0x05
 41e:	8c 83       	std	Y+4, r24	; 0x04
	res[3] = SPI_Transmit(0xFF);
 420:	8f ef       	ldi	r24, 0xFF	; 255
 422:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	9f 83       	std	Y+7, r25	; 0x07
 42a:	8e 83       	std	Y+6, r24	; 0x06
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

Disassembly of section .text.SPI_warmup:

00000468 <SPI_warmup>:

//more like a power up sequence pulse the SCK line at least 75 times
void SPI_warmup()
{
 468:	cf 93       	push	r28
	PORTD &= ~(1 << CS);
 46a:	8b b1       	in	r24, 0x0b	; 11
 46c:	8b 7f       	andi	r24, 0xFB	; 251
 46e:	8b b9       	out	0x0b, r24	; 11
 470:	89 ef       	ldi	r24, 0xF9	; 249
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <SPI_warmup+0xc>
 478:	00 c0       	rjmp	.+0      	; 0x47a <SPI_warmup+0x12>
 47a:	00 00       	nop
	
	_delay_ms(1);
		
	for(uint8_t i = 0; i < 10; i++)
 47c:	c0 e0       	ldi	r28, 0x00	; 0
 47e:	04 c0       	rjmp	.+8      	; 0x488 <SPI_warmup+0x20>
	{
		SPI_Transmit(0xFF);
 480:	8f ef       	ldi	r24, 0xFF	; 255
 482:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
{
	PORTD &= ~(1 << CS);
	
	_delay_ms(1);
		
	for(uint8_t i = 0; i < 10; i++)
 486:	cf 5f       	subi	r28, 0xFF	; 255
 488:	ca 30       	cpi	r28, 0x0A	; 10
 48a:	d0 f3       	brcs	.-12     	; 0x480 <SPI_warmup+0x18>
	{
		SPI_Transmit(0xFF);
	}
	
	PORTD |= (1 << CS);
 48c:	8b b1       	in	r24, 0x0b	; 11
 48e:	84 60       	ori	r24, 0x04	; 4
 490:	8b b9       	out	0x0b, r24	; 11
}
 492:	cf 91       	pop	r28
 494:	08 95       	ret

Disassembly of section .text.SPI_IDLE:

00000374 <SPI_IDLE>:

uint8_t SPI_IDLE()
{
 374:	cf 93       	push	r28
	//designed to assert the Micro SD card properly
	SPI_Transmit(0xFF);
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	PORTB &= ~(1 << CS);
 37c:	85 b1       	in	r24, 0x05	; 5
 37e:	8b 7f       	andi	r24, 0xFB	; 251
 380:	85 b9       	out	0x05, r24	; 5
	SPI_Transmit(0xFF);
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	
	MSD_Transmition(0, 0, 0x94);
 388:	24 e9       	ldi	r18, 0x94	; 148
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	ba 01       	movw	r22, r20
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 31 01 	call	0x262	; 0x262 <MSD_Transmition>
	uint8_t idle_res = readRes_1();
 396:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <readRes_1>
 39a:	c8 2f       	mov	r28, r24
	
	SPI_Transmit(0xFF);
 39c:	8f ef       	ldi	r24, 0xFF	; 255
 39e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	PORTB |= (1 << CS);
 3a2:	85 b1       	in	r24, 0x05	; 5
 3a4:	84 60       	ori	r24, 0x04	; 4
 3a6:	85 b9       	out	0x05, r24	; 5
	SPI_Transmit(0xFF);
 3a8:	8f ef       	ldi	r24, 0xFF	; 255
 3aa:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	
	return idle_res;
}
 3ae:	8c 2f       	mov	r24, r28
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret

Disassembly of section .text.SPI_READ_OCR:

000002ee <SPI_READ_OCR>:

void SPI_READ_OCR(uint8_t *res[])
{
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	ec 01       	movw	r28, r24
	SPI_Transmit(0xFF);
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	PORTB &= ~(1 << CS);
 2fa:	85 b1       	in	r24, 0x05	; 5
 2fc:	8b 7f       	andi	r24, 0xFB	; 251
 2fe:	85 b9       	out	0x05, r24	; 5
	SPI_Transmit(0xFF);
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	
	MSD_Transmition(58, 0x0000000, 0);
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	ba 01       	movw	r22, r20
 30e:	8a e3       	ldi	r24, 0x3A	; 58
 310:	0e 94 31 01 	call	0x262	; 0x262 <MSD_Transmition>
	readRes_3(res);
 314:	ce 01       	movw	r24, r28
 316:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <readRes_3>
	
	SPI_Transmit(0xFF);
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	PORTB |= (1 << CS);
 320:	85 b1       	in	r24, 0x05	; 5
 322:	84 60       	ori	r24, 0x04	; 4
 324:	85 b9       	out	0x05, r24	; 5
	SPI_Transmit(0xFF);
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

Disassembly of section .text.SPI_IF_CON:

000002a8 <SPI_IF_CON>:

void SPI_IF_CON(uint8_t res[])
{
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	ec 01       	movw	r28, r24
	//designed to assert the Micro SD card properly
	SPI_Transmit(0xFF);
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	PORTB &= ~(1 << CS);
 2b4:	85 b1       	in	r24, 0x05	; 5
 2b6:	8b 7f       	andi	r24, 0xFB	; 251
 2b8:	85 b9       	out	0x05, r24	; 5
	SPI_Transmit(0xFF);
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	
	MSD_Transmition(8, 0x000001AA, 0x87); 
 2c0:	27 e8       	ldi	r18, 0x87	; 135
 2c2:	4a ea       	ldi	r20, 0xAA	; 170
 2c4:	51 e0       	ldi	r21, 0x01	; 1
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	88 e0       	ldi	r24, 0x08	; 8
 2cc:	0e 94 31 01 	call	0x262	; 0x262 <MSD_Transmition>
	readRes_7(res);
 2d0:	ce 01       	movw	r24, r28
 2d2:	0e 94 19 02 	call	0x432	; 0x432 <readRes_7>
	
	SPI_Transmit(0xFF);
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	PORTB |= (1 << CS);
 2dc:	85 b1       	in	r24, 0x05	; 5
 2de:	84 60       	ori	r24, 0x04	; 4
 2e0:	85 b9       	out	0x05, r24	; 5
	SPI_Transmit(0xFF);
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
}
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

Disassembly of section .text.SPI_APP_CMD:

000003b4 <SPI_APP_CMD>:

uint8_t SPI_APP_CMD()
{
 3b4:	cf 93       	push	r28
	SPI_Transmit(0xFF);
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	PORTB &= ~(1 << CS);
 3bc:	85 b1       	in	r24, 0x05	; 5
 3be:	8b 7f       	andi	r24, 0xFB	; 251
 3c0:	85 b9       	out	0x05, r24	; 5
	SPI_Transmit(0xFF);
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	
	MSD_Transmition(55, 0, 0);
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	50 e0       	ldi	r21, 0x00	; 0
 3ce:	ba 01       	movw	r22, r20
 3d0:	87 e3       	ldi	r24, 0x37	; 55
 3d2:	0e 94 31 01 	call	0x262	; 0x262 <MSD_Transmition>
	uint8_t res = readRes_1();
 3d6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <readRes_1>
 3da:	c8 2f       	mov	r28, r24
	
	SPI_Transmit(0xFF);
 3dc:	8f ef       	ldi	r24, 0xFF	; 255
 3de:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	PORTB |= (1 << CS);
 3e2:	85 b1       	in	r24, 0x05	; 5
 3e4:	84 60       	ori	r24, 0x04	; 4
 3e6:	85 b9       	out	0x05, r24	; 5
	SPI_Transmit(0xFF);
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	
	return res;
}
 3ee:	8c 2f       	mov	r24, r28
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

Disassembly of section .text.SPI_SEND_OP:

00000332 <SPI_SEND_OP>:

uint8_t SPI_SEND_OP()
{
 332:	cf 93       	push	r28
	SPI_Transmit(0xFF);
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	PORTB &= ~(1 << CS);
 33a:	85 b1       	in	r24, 0x05	; 5
 33c:	8b 7f       	andi	r24, 0xFB	; 251
 33e:	85 b9       	out	0x05, r24	; 5
	SPI_Transmit(0xFF);
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	
	MSD_Transmition(41, 0x40000000, 0); 
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	50 e0       	ldi	r21, 0x00	; 0
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	70 e4       	ldi	r23, 0x40	; 64
 350:	89 e2       	ldi	r24, 0x29	; 41
 352:	0e 94 31 01 	call	0x262	; 0x262 <MSD_Transmition>
	uint8_t res = readRes_1();
 356:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <readRes_1>
 35a:	c8 2f       	mov	r28, r24
	
	SPI_Transmit(0xFF);
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	PORTB |= (1 << CS);
 362:	85 b1       	in	r24, 0x05	; 5
 364:	84 60       	ori	r24, 0x04	; 4
 366:	85 b9       	out	0x05, r24	; 5
	SPI_Transmit(0xFF);
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	
	return res;
}
 36e:	8c 2f       	mov	r24, r28
 370:	cf 91       	pop	r28
 372:	08 95       	ret

Disassembly of section .text.MSD_SPI_Init:

00000186 <MSD_SPI_Init>:

uint8_t MSD_SPI_Init()
{
 186:	ef 92       	push	r14
 188:	ff 92       	push	r15
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	29 97       	sbiw	r28, 0x09	; 9
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	cd bf       	out	0x3d, r28	; 61
	SPI_warmup();
 1a0:	0e 94 34 02 	call	0x468	; 0x468 <SPI_warmup>
	uint8_t res1 = SPI_IDLE();
 1a4:	0e 94 ba 01 	call	0x374	; 0x374 <SPI_IDLE>
	
	if(res1 != 0x01)
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	29 f5       	brne	.+74     	; 0x1f6 <MSD_SPI_Init+0x70>
	{
		return INIT_FAILURE;
	}
	
	uint8_t echo[4];
	SPI_IF_CON(echo);
 1ac:	ce 01       	movw	r24, r28
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <SPI_IF_CON>
	
	//paranoia
	
	if((echo[4] != 0xAA) && (echo[3] != 0x01))
 1b4:	8d 81       	ldd	r24, Y+5	; 0x05
 1b6:	8a 3a       	cpi	r24, 0xAA	; 170
 1b8:	19 f0       	breq	.+6      	; 0x1c0 <MSD_SPI_Init+0x3a>
 1ba:	8c 81       	ldd	r24, Y+4	; 0x04
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	e9 f4       	brne	.+58     	; 0x1fa <MSD_SPI_Init+0x74>
		return INIT_FAILURE;
	}
	
	
	uint8_t OCR[5];
	SPI_READ_OCR(OCR);
 1c0:	ce 01       	movw	r24, r28
 1c2:	05 96       	adiw	r24, 0x05	; 5
 1c4:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_READ_OCR>
	
	uint16_t i = 0;
 1c8:	e1 2c       	mov	r14, r1
 1ca:	f1 2c       	mov	r15, r1
	uint8_t exRes[4];
	do 
	{
		if(i > 100)
 1cc:	85 e6       	ldi	r24, 0x65	; 101
 1ce:	e8 16       	cp	r14, r24
 1d0:	f1 04       	cpc	r15, r1
 1d2:	a8 f4       	brcc	.+42     	; 0x1fe <MSD_SPI_Init+0x78>
		{
			return INIT_FAILURE; 
		}
		
		exRes[0] = SPI_APP_CMD();
 1d4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <SPI_APP_CMD>
		if(exRes[0] < 2)
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	10 f4       	brcc	.+4      	; 0x1e0 <MSD_SPI_Init+0x5a>
		{
			exRes[0] = SPI_SEND_OP();
 1dc:	0e 94 99 01 	call	0x332	; 0x332 <SPI_SEND_OP>
		}
		i++;
 1e0:	9f ef       	ldi	r25, 0xFF	; 255
 1e2:	e9 1a       	sub	r14, r25
 1e4:	f9 0a       	sbc	r15, r25
		
	} while (exRes[0] != 0x00);
 1e6:	18 2f       	mov	r17, r24
 1e8:	81 11       	cpse	r24, r1
 1ea:	f0 cf       	rjmp	.-32     	; 0x1cc <MSD_SPI_Init+0x46>
	
	SPI_READ_OCR(OCR);
 1ec:	ce 01       	movw	r24, r28
 1ee:	05 96       	adiw	r24, 0x05	; 5
 1f0:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_READ_OCR>
	return INIT_SUCCESS;
 1f4:	05 c0       	rjmp	.+10     	; 0x200 <MSD_SPI_Init+0x7a>
	SPI_warmup();
	uint8_t res1 = SPI_IDLE();
	
	if(res1 != 0x01)
	{
		return INIT_FAILURE;
 1f6:	11 e0       	ldi	r17, 0x01	; 1
 1f8:	03 c0       	rjmp	.+6      	; 0x200 <MSD_SPI_Init+0x7a>
	
	//paranoia
	
	if((echo[4] != 0xAA) && (echo[3] != 0x01))
	{
		return INIT_FAILURE;
 1fa:	11 e0       	ldi	r17, 0x01	; 1
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <MSD_SPI_Init+0x7a>
	uint8_t exRes[4];
	do 
	{
		if(i > 100)
		{
			return INIT_FAILURE; 
 1fe:	11 e0       	ldi	r17, 0x01	; 1
		
	} while (exRes[0] != 0x00);
	
	SPI_READ_OCR(OCR);
	return INIT_SUCCESS;
}
 200:	81 2f       	mov	r24, r17
 202:	29 96       	adiw	r28, 0x09	; 9
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	ff 90       	pop	r15
 216:	ef 90       	pop	r14
 218:	08 95       	ret

Disassembly of section .text.MSD_SPI_READ_SINGLE_BLOCK:

0000021a <MSD_SPI_READ_SINGLE_BLOCK>:

uint8_t MSD_SPI_READ_SINGLE_BLOCK(uint32_t addr, uint8_t *data[])
{
 21a:	cf 92       	push	r12
 21c:	df 92       	push	r13
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	cf 93       	push	r28
 224:	6b 01       	movw	r12, r22
 226:	7c 01       	movw	r14, r24
		
		.start_block = 0xFE,
		.timeout = 0xFF,
	};
	
	SPI_Transmit(0xFF);
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	PORTB &= ~(1 << CS);
 22e:	85 b1       	in	r24, 0x05	; 5
 230:	8b 7f       	andi	r24, 0xFB	; 251
 232:	85 b9       	out	0x05, r24	; 5
	SPI_Transmit(0xFF);
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Transmit>
	
	uint8_t res = 0;
	uint8_t try = 0;
 23a:	c0 e0       	ldi	r28, 0x00	; 0
	
	do 
	{
		if(try >= 255) return READ_BLOCK_FAILURE;
 23c:	cf 3f       	cpi	r28, 0xFF	; 255
 23e:	51 f0       	breq	.+20     	; 0x254 <MSD_SPI_READ_SINGLE_BLOCK+0x3a>
		
		MSD_Transmition(17, addr, 0);
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	b7 01       	movw	r22, r14
 244:	a6 01       	movw	r20, r12
 246:	81 e1       	ldi	r24, 0x11	; 17
 248:	0e 94 31 01 	call	0x262	; 0x262 <MSD_Transmition>
		uint8_t res = readRes_1();
 24c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <readRes_1>
		try++;
 250:	cf 5f       	subi	r28, 0xFF	; 255
 252:	f4 cf       	rjmp	.-24     	; 0x23c <MSD_SPI_READ_SINGLE_BLOCK+0x22>
	SPI_Transmit(0xFF);
	PORTB |= (1 << CS);
	SPI_Transmit(0xFF);
	
	return READ_BLOCK_SUCCESS;
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	cf 91       	pop	r28
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	df 90       	pop	r13
 25e:	cf 90       	pop	r12
 260:	08 95       	ret

Disassembly of section .text.SPI_Init:

000004ea <SPI_Init>:
 */ 
#include "SPI.h"

void SPI_Init()
{
	DDRB |=  (1 << CS) | (1 << MOSI) | (1 << SCK);
 4ea:	84 b1       	in	r24, 0x04	; 4
 4ec:	8c 62       	ori	r24, 0x2C	; 44
 4ee:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << MISO);
 4f0:	84 b1       	in	r24, 0x04	; 4
 4f2:	80 61       	ori	r24, 0x10	; 16
 4f4:	84 b9       	out	0x04, r24	; 4

	SPCR = (1 << SPE) | (1 << MSTR);
 4f6:	80 e5       	ldi	r24, 0x50	; 80
 4f8:	8c bd       	out	0x2c, r24	; 44
 4fa:	08 95       	ret

Disassembly of section .text.SPI_Transmit:

000004fc <SPI_Transmit>:
}

uint8_t SPI_Transmit(uint8_t data)
{
	SPDR = data;
 4fc:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)));
 4fe:	0d b4       	in	r0, 0x2d	; 45
 500:	07 fe       	sbrs	r0, 7
 502:	fd cf       	rjmp	.-6      	; 0x4fe <SPI_Transmit+0x2>
	return SPDR;
 504:	8e b5       	in	r24, 0x2e	; 46
}
 506:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000510 <_fini>:
 510:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000512 <__funcs_on_exit>:
 512:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000514 <__simulator_exit>:
 514:	08 95       	ret

Disassembly of section .text.exit:

000004d4 <exit>:
 4d4:	ec 01       	movw	r28, r24
 4d6:	0e 94 89 02 	call	0x512	; 0x512 <__funcs_on_exit>
 4da:	0e 94 88 02 	call	0x510	; 0x510 <_fini>
 4de:	ce 01       	movw	r24, r28
 4e0:	0e 94 8a 02 	call	0x514	; 0x514 <__simulator_exit>
 4e4:	ce 01       	movw	r24, r28
 4e6:	0e 94 86 02 	call	0x50c	; 0x50c <_Exit>

Disassembly of section .text._Exit:

0000050c <_Exit>:
 50c:	0e 94 5c 00 	call	0xb8	; 0xb8 <_exit>
